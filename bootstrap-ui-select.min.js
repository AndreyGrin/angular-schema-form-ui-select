angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/multi.html",'<script type="text/javascript">\n    angular.module(\'lightApp\').controller(\'selectItemCtrl\', [\'$scope\', \'$http\', \'$location\', \'$timeout\', function ($scope, $http, $location, $timeout) {\n        $scope.getItem = {\n            readOnly: true\n        };\n\n        $scope.init = function(select_models, values, category, name) {\n          $scope.getItem.category = category;\n          $scope.getItem.name = name;\n          $scope.select_models = select_models;\n          $scope.values = values;\n          console.log(\'select_models\', $scope.select_models);\n          console.log(\'values\', $scope.values);\n        };\n\n        $scope.items = [];\n\n        $timeout(function(){\n          $scope.items = [\n            { label: \'Form Admin\', value: \'#13:01\'},\n            { label: \'Rule Admin\', value: \'#13:02\'},\n            { label: \'User Admin\', value: \'#13:03\'}\n          ];\n          if (angular.isArray($scope.values)) {\n            $scope.values.forEach(function(value) {\n              for (var i = 0; i < $scope.items.length; i++) {\n                if (value == $scope.items[i][\'value\']) {\n                  $scope.select_models.push($scope.items[i]);\n                  break;\n                }\n              }\n           });\n           } else {\n            // Let the output be the input untouched\n            $scope.select_models = $scope.items;\n          }\n\n        },3000);\n    }]);\n</script><div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-controller="selectItemCtrl" ng-init="init(form.select_models = [], $$value$$, form.options.category, form.options.name)"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}</ui-select-match><ui-select-choices repeat="item in items | propsFilter: {label: $select.search}"><div ng-bind-html="item.label | highlight: $select.search"></div></ui-select-choices></ui-select><input toggle-model="" type="hidden" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/single.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="select_models=(form.schema.items | where : {value: $$value$$})"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-init="select_model.selected=select_models[0]"><ui-select ng-model="select_model.selected" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}</ui-select-match><ui-select-choices repeat="item in form.schema.items | propsFilter: {label: $select.search}"><div ng-bind-html="item.label | highlight: $select.search"></div></ui-select-choices></ui-select><input type="hidden" toggle-single-model="" sf-changed="form" ng-model="insideModel" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,s){var o=function(t,o,l){if("string"===o.type&&"uiselect"==o.format){var r=e.stdFormObj(t,o,l);return r.key=l.path,r.type="uiselect",l.lookup[s.stringify(l.path)]=r,r}};e.defaults.string.unshift(o);var o=function(t,o,l){if("number"===o.type&&"uiselect"==o.format){var r=e.stdFormObj(t,o,l);return r.key=l.path,r.type="uiselect",l.lookup[s.stringify(l.path)]=r,r}};e.defaults.number.unshift(o);var l=function(t,o,l){if("array"===o.type&&"uiselect"==o.format){var r=e.stdFormObj(t,o,l);return r.key=l.path,r.type="uimultiselect",l.lookup[s.stringify(l.path)]=r,r}};e.defaults.array.unshift(l),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.createDirective("uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.addMapping("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html"),t.createDirective("uimultiselect","directives/decorators/bootstrap/uiselect/multi.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("toggleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("form.select_models",function(){0==e.$parent.form.select_models.length?(e.$parent.insideModel=e.$parent.$$value$$,void 0!=e.$parent.ngModel.$viewValue&&e.$parent.ngModel.$setViewValue(e.$parent.form.select_models)):(e.$parent.insideModel=e.$parent.form.select_models,e.$parent.ngModel.$setViewValue(e.$parent.form.select_models))},!0)}]}}).filter("whereMulti",function(){return function(e,t,s){var o=[];return angular.isArray(s)?s.forEach(function(s){for(var l=0;l<e.length;l++)if(s==e[l][t]){o.push(e[l]);break}}):o=e,o}}).filter("propsFilter",function(){return function(e,t){var s=[];return angular.isArray(e)?e.forEach(function(e){for(var o=!1,l=Object.keys(t),r=0;r<l.length;r++){var a=l[r],c=t[a].toLowerCase();if(-1!==e[a].toString().toLowerCase().indexOf(c)){o=!0;break}}o&&s.push(e)}):s=e,s}});